diff -ruN WSpace/VM.hs WSpace_fixed/VM.hs
--- WSpace/VM.hs	2004-05-04 18:10:41
+++ WSpace_fixed/VM.hs	2024-03-14 20:44:30
@@ -1,6 +1,6 @@
 module VM where
 
-import IO
+import System.IO
 
 {- Stack machine for running whitespace programs -}
 
@@ -41,10 +41,10 @@
 
 data VMState = VM {
         program :: Program,
-	valstack :: Stack,
-	callstack :: Stack,
-	memory :: Heap,
-	pcounter :: Integer }
+        valstack :: Stack,
+        callstack :: Stack,
+        memory :: Heap,
+        pcounter :: Integer }
 
 vm :: VMState -> IO ()
 vm (VM prog (Stack stack) cstack heap pc) = do
@@ -70,50 +70,50 @@
 doInstr (VM prog (Stack (y:x:stack)) cs heap pc) (Infix op)
     = vm (VM prog (Stack ((doOp op x y):stack)) cs heap pc)
   where doOp Plus x y = x + y
-	doOp Minus x y = x - y
-	doOp Times x y = x * y
-	doOp Divide x y = x `div` y
-	doOp Modulo x y = x `mod` y
+        doOp Minus x y = x - y
+        doOp Times x y = x * y
+        doOp Divide x y = x `div` y
+        doOp Modulo x y = x `mod` y
 doInstr (VM prog (Stack (n:stack)) cs heap pc) OutputChar
     = do putChar (toEnum (fromInteger n))
-	 hFlush stdout
-	 vm (VM prog (Stack stack) cs heap pc)
+         hFlush stdout
+         vm (VM prog (Stack stack) cs heap pc)
 doInstr (VM prog (Stack (loc:stack)) cs heap pc) ReadChar
     = do ch <- getChar
-	 hp <- store (toInteger (fromEnum ch)) loc heap
-	 vm (VM prog (Stack stack) cs hp pc)
+         hp <- store (toInteger (fromEnum ch)) loc heap
+         vm (VM prog (Stack stack) cs hp pc)
 doInstr (VM prog (Stack (loc:stack)) cs heap pc) ReadNum
     = do ch <- getLine
-	 let num = (read ch)::Integer
-	 hp <- store num loc heap
-	 vm (VM prog (Stack stack) cs hp pc)	  
+         let num = (read ch)::Integer
+         hp <- store num loc heap
+         vm (VM prog (Stack stack) cs hp pc)      
 doInstr (VM prog (Stack (n:stack)) cs heap pc) OutputNum
     = do putStr (show n)
-	 hFlush stdout
-	 vm (VM prog (Stack stack) cs heap pc)
+         hFlush stdout
+         vm (VM prog (Stack stack) cs heap pc)
 doInstr (VM prog stack cs heap pc) (Label _)
     = vm (VM prog stack cs heap pc)
 doInstr (VM prog stack (Stack cs) heap pc) (Call l)
     = do loc <- findLabel l prog
-	 vm (VM prog stack (Stack (pc:cs)) heap loc)
+         vm (VM prog stack (Stack (pc:cs)) heap loc)
 doInstr (VM prog stack cs heap pc) (Jump l)
     = do loc <- findLabel l prog
-	 vm (VM prog stack cs heap loc)
+         vm (VM prog stack cs heap loc)
 doInstr (VM prog (Stack (n:stack)) cs heap pc) (If t l)
     = do if (test t n)
           then do loc <- findLabel l prog
-		  vm (VM prog (Stack stack) cs heap loc)
-	  else vm (VM prog (Stack stack) cs heap pc)
+                  vm (VM prog (Stack stack) cs heap loc)
+          else vm (VM prog (Stack stack) cs heap pc)
   where test Zero n = n==0
-	test Negative n = n<0
+        test Negative n = n<0
 doInstr (VM prog stack (Stack (c:cs)) heap pc) Return
     = vm (VM prog stack (Stack cs) heap c)
 doInstr (VM prog (Stack (n:loc:stack)) cs heap pc) Store
     = do hp <- store n loc heap
-	 vm (VM prog (Stack stack) cs hp pc)
+         vm (VM prog (Stack stack) cs hp pc)
 doInstr (VM prog (Stack (loc:stack)) cs heap pc) Retrieve
     = do val <- retrieve loc heap
-	 vm (VM prog (Stack (val:stack)) cs heap pc)
+         vm (VM prog (Stack (val:stack)) cs heap pc)
 
 doInstr (VM prog (Stack stack) cs heap pc) End
        = return ()
@@ -138,8 +138,8 @@
 store :: Integer -> Integer -> Heap -> IO Heap
 store x 0 (h:hs) = return (x:hs)
 store x n (h:hs) = do hp <- store x (n-1) hs
-		      return (h:hp)
+                      return (h:hp)
 store x 0 [] = return (x:[])
 store x n [] = do hp <- store x (n-1) [] 
-		  return (0:hp)
+                  return (0:hp)
 
diff -ruN WSpace/main.hs WSpace_fixed/main.hs
--- WSpace/main.hs	2003-03-31 16:33:44
+++ WSpace_fixed/main.hs	2024-03-14 20:45:47
@@ -26,18 +26,18 @@
 import VM
 import Tokens
 
-import System(getArgs)
+import System.Environment(getArgs)
 
 main :: IO ()
 main = do
        args <- getArgs
        if (length args)/=1
         then usage
-	else execute (head args)
+        else execute (head args)
 
 usage :: IO ()
 usage = do
-	putStrLn "wspace 0.2 (c) 2003 Edwin Brady"
-	putStrLn "-------------------------------"
-	putStrLn "Usage: wspace [file]"
+        putStrLn "wspace 0.2 (c) 2003 Edwin Brady"
+        putStrLn "-------------------------------"
+        putStrLn "Usage: wspace [file]"
 
